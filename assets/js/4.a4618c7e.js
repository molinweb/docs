(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{187:function(e,t,a){"use strict";a.r(t);var r=a(0),s=Object(r.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[e._m(0),e._v(" "),a("p",[e._v("Lombok官方介绍")]),e._v(" "),e._m(1),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("Lombok是一种Java™实用工具，可用来帮助开发人员消除Java的冗长代码，尤其是对于简单的Java对象（POJO）。它通过注释实现这一目的。通过在开发环境中实现Lombok，开发人员可以节省构建诸如hashCode()和equals()这样的方法以及以往用来分类各种accessor和mutator的大量时间。")]),e._v(" "),e._m(2),e._v(" "),a("Picture",{attrs:{src:"Lombok/Lombok_1.png"}}),e._v(" "),e._m(3),e._v(" "),e._m(4),e._v(" "),a("ul",[e._m(5),e._v(" "),a("li",[a("Picture",{attrs:{src:"Lombok/Lombok_2.png"}})],1)]),e._v(" "),e._m(6),e._v(" "),e._m(7),e._m(8),e._v(" "),e._m(9)],1)},[function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[this._v("#")]),this._v(" 前言")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("blockquote",[t("p",[this._v("Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java.\nNever write another getter or equals method again, with one annotation your class has a fully featured builder,\nAutomate your logging variables, and much more.")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"idea安装lombok插件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#idea安装lombok插件","aria-hidden":"true"}},[this._v("#")]),this._v(" idea安装lombok插件")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"重启idea"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重启idea","aria-hidden":"true"}},[this._v("#")]),this._v(" 重启Idea")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"设置enable-annotation-processing"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设置enable-annotation-processing","aria-hidden":"true"}},[this._v("#")]),this._v(" 设置Enable annotation processing")])},function(){var e=this.$createElement,t=this._self._c||e;return t("li",[this._v("避免idea报错提醒\n"),t("em",[this._v("preserences =>Build =>Compiler=>Annotation Processors =>勾选 Enable annotation processing")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"添加maven依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#添加maven依赖","aria-hidden":"true"}},[this._v("#")]),this._v(" 添加maven依赖")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[e._v("    \n   "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("dependency"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n               "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("groupId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("projectlombok"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("groupId"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n               "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("artifactId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("lombok"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("artifactId"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n               "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("version"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.16")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v(".10")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("version"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("dependency"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n  \n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"常用方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用方法","aria-hidden":"true"}},[this._v("#")]),this._v(" 常用方法")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ul",[a("li",[a("code",[e._v("@NonNull")]),e._v("：给方法参数增加这个注解会自动在方法内对该参数进行是否为空的校验，如果为空，则抛出NPE（NullPointerException）")]),e._v(" "),a("li",[a("code",[e._v("@Cleanup")]),e._v("：自动管理资源，用在局部变量之前，在当前变量范围内即将执行完毕退出之前会自动清理资源，自动生成try-finally这样的代码来关闭流")]),e._v(" "),a("li",[a("code",[e._v("@Getter/@Setter")]),e._v("：用在属性上，再也不用自己手写setter和getter方法了，还可以指定访问范围")]),e._v(" "),a("li",[a("code",[e._v("@ToString")]),e._v("：用在类上，可以自动覆写toString方法，当然还可以加其他参数，例如@ToString(exclude=”id”)排除id属性，或者@ToString(callSuper=true, includeFieldNames=true)调用父类的toString方法，包含所有属性")]),e._v(" "),a("li",[a("code",[e._v("@EqualsAndHashCode")]),e._v("：用在类上，自动生成equals方法和hashCode方法")]),e._v(" "),a("li",[a("code",[e._v("@NoArgsConstructor")]),e._v(", "),a("code",[e._v("@RequiredArgsConstructor")]),e._v(" and "),a("code",[e._v("@AllArgsConstructor")]),e._v("：用在类上，自动生成无参构造和使用所有参数的构造函数以及把所有@NonNull属性作为参数的构造函数，如果指定staticName = “of”参数，同时还会生成一个返回类对象的静态工厂方法，比使用构造函数方便很多")]),e._v(" "),a("li",[a("code",[e._v("@Data")]),e._v("：注解在类上，相当于同时使用了@ToString、@EqualsAndHashCode、@Getter、@Setter和@RequiredArgsConstrutor这些注解，对于POJO类十分有用")]),e._v(" "),a("li",[a("code",[e._v("@Value")]),e._v("：用在类上，是@Data的不可变形式，相当于为属性添加final声明，只提供getter方法，而不提供setter方法")]),e._v(" "),a("li",[a("code",[e._v("@Builder")]),e._v('：用在类、构造器、方法上，为你提供复杂的builder APIs，让你可以像如下方式一样调用Person.builder().name("Adam Savage").city("San Francisco").job("Mythbusters").job("Unchained Reaction").build();更多说明参考Builder')]),e._v(" "),a("li",[a("code",[e._v("@SneakyThrows")]),e._v("：自动抛受检异常，而无需显式在方法上使用throws语句")]),e._v(" "),a("li",[a("code",[e._v("@Synchronized")]),e._v("：用在方法上，将方法声明为同步的，并自动加锁，而锁对象是一个私有的属性$lock或$LOCK，而java中的synchronized关键字锁对象是this，锁在this或者自己的类对象上存在副作用，就是你不能阻止非受控代码去锁this或者类对象，这可能会导致竞争条件或者其它线程错误")]),e._v(" "),a("li",[a("code",[e._v("@Getter(lazy=true)")]),e._v("：可以替代经典的Double Check Lock样板代码")]),e._v(" "),a("li",[a("code",[e._v("@Log")]),e._v("：根据不同的注解生成不同类型的log对象，但是实例名称都是log，有六种可选实现类")]),e._v(" "),a("li",[a("code",[e._v("@CommonsLogCreates")]),e._v(" log = org.apache.commons.logging.LogFactory.getLog(LogExample.class);")]),e._v(" "),a("li",[a("code",[e._v("@LogCreates")]),e._v(" log = java.util.logging.Logger.getLogger(LogExample.class.getName());")]),e._v(" "),a("li",[a("code",[e._v("@Log4jCreates")]),e._v(" log = org.apache.log4j.Logger.getLogger(LogExample.class);")]),e._v(" "),a("li",[a("code",[e._v("@Log4j2Creates")]),e._v(" log = org.apache.logging.log4j.LogManager.getLogger(LogExample.class);")]),e._v(" "),a("li",[a("code",[e._v("@Slf4jCreates")]),e._v(" log = org.slf4j.LoggerFactory.getLogger(LogExample.class);")]),e._v(" "),a("li",[a("code",[e._v("@XSlf4jCreates")]),e._v(" log = org.slf4j.ext.XLoggerFactory.getXLogger(LogExample.class);")]),e._v(" "),a("li",[a("code",[e._v("@Slf4j")]),e._v(" : 注解在类上, 为类提供一个属性名为 log 的 log4j 的日志对象")]),e._v(" "),a("li",[a("code",[e._v("@Log4j")]),e._v(" : 注解在类上, 为类提供一个属性名为 log 的 log4j 的日志对象")])])}],!1,null,null,null);t.default=s.exports}}]);